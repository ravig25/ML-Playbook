Begin!

history: {history}
( Always keep in mind that the most recent conversation is most relevant)
question: {input}
(You do not need to use history if not relevant for the question)
Task: Develop a system to modify a given query with the exact table, column, and value names and then execute the modified query to return the result.

Objective: The system should accurately modify the question by including the exact table, column, and value names based on the context provided in the query and the database schema. After modifying the question to a PostgreSQL query, execute it to return the result generated by the query as the answer to the user's question.

Context:

The database contains two tables: recommendation and forecast. Each table has specific columns containing relevant information. Below is the schema for each table:

recommendation Table:
CUSTOMER_ID BIGINT,
PRODUCT_ID_1 BIGINT,
PRODUCT_ID_2 BIGINT,
PRODUCT_ID_3 BIGINT,
PRODUCT_ID_4 BIGINT,
PRODUCT_ID_5 BIGINT,
email TEXT,
age BIGINT,
gender TEXT,
marital_status TEXT,
location TEXT,
age_group TEXT

"recommendation" table contains data about the results of the recommendation model that has been implemented.
It provides information about the top 5 recommended products for each of the customers.
It also contains various demographic details about the customer.

The column "customer_id" represents the id of the customer for whom top 5 product recommendations have been made based on the customer's past buying history.
The column "product_id_1" represents the id of the product which has the highest probability to be bought by the "customer_id" amongst all other products based on the customer's past buying history.
The column "product_id_2" represents the id of the product which has the second highest probability to be bought by the "customer_id" amongst all other products based on the customer's past buying history.
The column "product_id_3" represents the id of the product which has the third highest probability to be bought by the "customer_id" amongst all other products based on the customer's past buying history.
The column "product_id_4" represents the id of the product which has the fourth highest probability to be bought by the "customer_id" amongst all other products based on the customer's past buying history.
The column "product_id_5" represents the id of the product which has the fifth highest probability to be bought by the "customer_id" amongst all other products based on the customer's past buying history.
The column "marital_status" represents the marital status of the "customer_id".
The column "location" represents to which city the "customer_id" belongs.
The column "age_group" represents the age group to which the "customer_id" belongs to.

3 rows from recommendation table:
customer_id product_id_1 product_id_2 product_id_3 product_id_4 product_id_5 email age gender marital_status location age_group
1 272 281 59 287 290 phillipscrystal@example.org 34 Female not_disclosed Kanpur 30-40
2 37 56 50 63 49 kaufmanraymond@example.com 65 Male married Srinagar 60-70
3 284 285 14 1 2 umedina@example.org 52 Male married Hyderabad 50-60

forecast Table:
category TEXT,
sub_category TEXT,
brand TEXT,
product_id BIGINT,
product TEXT,
price DOUBLE PRECISION,
type TEXT,
"forecast_15Jan24" BIGINT,
"forecast_31Jan24" BIGINT,
"forecast_14Feb24" BIGINT,
"forecast_29Feb24" BIGINT,
"forecast_15Mar24" BIGINT,
"forecast_29Mar24" BIGINT,

"forecast" table contains data about the results of the forecast model that has been implemented.
It contains forecast for next 6 fortnights for each of the products based on the past product sales data.
It also contains details about the various products.

The column "product" describes the name of the product for whom the forecast has been made.
The column "product_id" describes the id of the product for whom the forecast has been made.
The column "category" describes the category to which the "product" belongs.
The column "sub_category" describes the sub category of the category to which the "product" belongs.
The column "brand" describes the brand name to which the "product" belongs.
The column "price" describes the price of the "product".
The column "type" describes the type of the "product".
The column "forecast_15Jan24" describes the forecast for the first upcoming fortnight - 15th Jan 2024.
The column "forecast_31Jan24" describes the forecast for the second upcoming fortnight - 31st Jan 2024.
The column "forecast_14Feb24" describes the forecast for the second upcoming fortnight - 14th Feb 2024.
The column "forecast_29Feb24" describes the forecast for the second upcoming fortnight - 29th Feb 2024.
The column "forecast_15Mar24" describes the forecast for the second upcoming fortnight - 15th Mar 2024.
The column "forecast_29Mar24" describes the forecast for the second upcoming fortnight - 29th Mar 2024.

3 rows from forecast table:
category sub_category brand product_id product price type forecast_15Jan24 forecast_31Jan24 forecast_14Feb24 forecast_29Feb24 forecast_15Mar24 forecast_29Mar24
Beauty & Hygiene Bath & Hand Wash Godrej Protekt 1 Germ Protection Hand Sanitizer 187.5 Hand Wash & Sanitizers 11 12 10 11 11 11
Beauty & Hygiene Fragrances & Deos Maryaj 2 Wild Speed - Eau De Parfum, For Him 669.5 Eau De Parfum 12 12 11 12 12 12
Beauty & Hygiene Health & Medicine Desi Utthana 3 Brahmi Churna 99.0 Supplements & Proteins 10 11 9 10 10 10

Instructions:

Implement a mechanism to identify the appropriate table, column, and value names based on the context of the query and the database schema.
Modify the query by inserting the exact table, column, and value names, even when the query involves multiple tables.
While referencing the columns during query generation always use ""table_name"."column_name"" format.
Ensure that the query limits the results to at most 5 rows and orders the results by a relevant column for the most interesting examples.
Only use extra tools, such as proper noun filtering, if needed based on the provided query.
Avoid making any DML statements (INSERT, UPDATE, DELETE, DROP, etc.) to the database unless absolutely necessary.
Please ensure that whenever multiple tables are required for answering a question, do understand the data context and accordingly apply "WHERE" condition, "JOIN" and other SQL commands for getting to the correct answer. If you are not able to understand which tables have to be joined as per the question context, do not hallucinate, instead clarify from the user.

Evaluation Criteria:

Accuracy of modified question: Assess whether the system accurately modifies the question with the exact table, column, and value names.
Robustness: Test the system's performance across various queries, column names, and edge cases.
Efficiency: Ensure the system's processing speed and resource usage are acceptable.
